src\scalation\util\GenIndexHtml.scala:50: warning: This catches all Throwables. If this is really intended, use `case _ : Throwable` to clear this warning.
        } catch { case _ => }
                       ^
src\scalation\util\GenIndexHtml.scala:64: warning: This catches all Throwables. If this is really intended, use `case _ : Throwable` to clear this warning.
                for (fi <- files) try recDeleteIndex (fi) catch { case _ => }
                                                                       ^
warning: there were 6 deprecation warning(s); re-run with -deprecation for details
warning: there were 3 feature warning(s); re-run with -feature for details
src\scalation\math\Combinatorics.scala:15: error: object util is not a member of package scalation
import scalation.util.Error
                 ^
src\scalation\math\Combinatorics.scala:16: error: object util is not a member of package scalation
import scalation.util.Error
                 ^
src\scalation\math\Combinatorics.scala:198: error: not found: value flaw
        if (a <= 0) flaw ("gammaF", "only handle positive cases")
                    ^
src\scalation\math\Combinatorics.scala:208: error: not found: value flaw
            flaw ("gammaF", "only handle positive integer and halves cases")
            ^
src\scalation\math\Primes.scala:16: error: object util is not a member of package scalation
import scalation.util.Swap.swap
                 ^
src\scalation\math\Primes.scala:149: error: not found: value swap
        for (i <- 0 until a.size) swap (a, i, rn.nextInt (a.size))
                                  ^
src\scalation\math\ProbNumber.scala:11: error: object util is not a member of package scalation
import scalation.util.Error
                 ^
src\scalation\math\ProbNumber.scala:22: error: class Error needs to be a trait to be mixed in
     extends Numeric [ProbNumber] with Ordered [ProbNumber] with Error
                                                                 ^
src\scalation\math\ProbNumber.scala:26: error: not found: value flaw
    if (p < 0. || p > 1.) flaw ("constructor", "p is not a probability " + p)
                          ^
src\scalation\linalgebra\Cholesky.scala:13: error: object util is not a member of package scalation
import scalation.util.Error
                 ^
src\scalation\linalgebra\MatrixD.scala:14: error: object util is not a member of package scalation
import scalation.util.Error
                 ^
src\scalation\linalgebra\Matrix.scala:13: error: object util is not a member of package scalation
import scalation.util.Error
                 ^
src\scalation\linalgebra\Cholesky.scala:23: error: not found: value flaw
    if ( ! a.isSquare)    flaw ("cholesky", "the matrix must be square")
                          ^
src\scalation\linalgebra\Cholesky.scala:24: error: not found: value flaw
    if ( ! a.isSymmetric) flaw ("cholesky", "the matrix must be symmetric")
                          ^
src\scalation\linalgebra\VectorD.scala:14: error: object math is not a member of package scalation
import scalation.math.DoubleWithExp._
                 ^
src\scalation\linalgebra\VectorD.scala:16: error: object util is not a member of package scalation
import scalation.util.Error
                 ^
src\scalation\linalgebra\Eigen.scala:20: error: object math is not a member of package scalation
import scalation.math.DoubleWithExp._
                 ^
src\scalation\linalgebra\Eigen.scala:21: error: object util is not a member of package scalation
import scalation.util.Error
                 ^
src\scalation\linalgebra\Eigen.scala:46: error: class Error needs to be a trait to be mixed in
      extends Eigen with Error
                         ^
src\scalation\linalgebra\Eigen.scala:55: error: not found: value flaw
        if (m != n) flaw ("constructor", "must have m == n")
                    ^
src\scalation\linalgebra\Eigen.scala:86: error: class Error needs to be a trait to be mixed in
      extends Eigen with Error
                         ^
src\scalation\linalgebra\Eigen.scala:99: error: not found: value flaw
        if (m != n) flaw ("constructor", "must have m == n")
                    ^
src\scalation\linalgebra\QRDecomp.scala:11: error: object util is not a member of package scalation
import scalation.util.Error
                 ^
src\scalation\linalgebra\Eigen.scala:144: error: class Error needs to be a trait to be mixed in
      extends Eigen with Error
                         ^
src\scalation\linalgebra\SymTriMatrixD.scala:14: error: object util is not a member of package scalation
import scalation.util.Error
                 ^
src\scalation\linalgebra\Eigen.scala:151: error: not found: value flaw
        if (a.dim1 != a.dim2) flaw ("constructor", "must have m == n")
                              ^
src\scalation\linalgebra\Eigen.scala:152: error: not found: value flaw
        if (! a.isSymmetric)  flaw ("constructor", "matrix a must be symmetric")
                              ^
src\scalation\linalgebra\Eigen.scala:186: error: class Error needs to be a trait to be mixed in
       extends Eigen with Error
                          ^
src\scalation\linalgebra\Eigen.scala:198: error: value ~^ is not a member of Double
        val t2  = t.sd(n-1) ~^ 2.
                            ^
src\scalation\linalgebra\Eigen.scala:258: error: class Error needs to be a trait to be mixed in
      extends Eigen with Error
                         ^
src\scalation\linalgebra\Eigen.scala:266: error: not found: value flaw
        if (m != a.dim2)     flaw ("constructor", "must have m == n")
                             ^
src\scalation\linalgebra\Eigen.scala:267: error: not found: value flaw
        if (! a.isSymmetric) flaw ("constructor", "matrix a must be symmetric")
                             ^
src\scalation\linalgebra\Eigen.scala:297: error: class Error needs to be a trait to be mixed in
      extends Eigen with Error
                         ^
src\scalation\linalgebra\Eigen.scala:301: error: not found: value flaw
    if (a.dim2 != m) flaw ("constructor", "must have m == n")
                     ^
src\scalation\linalgebra\Matric.scala:11: error: object math is not a member of package scalation
import scalation.math.Complex
                 ^
src\scalation\linalgebra\Matric.scala:12: error: object util is not a member of package scalation
import scalation.util.Error
                 ^
src\scalation\linalgebra\Matric.scala:42: error: not found: type Complex
    def apply (i: Int, j: Int): Complex
                                ^
src\scalation\linalgebra\VectorC.scala:14: error: object math is not a member of package scalation
import scalation.math.Complex._
                 ^
src\scalation\linalgebra\VectorC.scala:15: error: object math is not a member of package scalation
import scalation.math.DoubleWithExp._
                 ^
src\scalation\linalgebra\VectorC.scala:17: error: object util is not a member of package scalation
import scalation.util.Error
                 ^
src\scalation\linalgebra\Matric.scala:56: error: not found: type Complex
    def update (i: Int, j: Int, x: Complex)
                                   ^
src\scalation\linalgebra\Matric.scala:69: error: not found: type Complex
    def set (x: Complex) { for (i <- range1; j <- range2) this(i, j) = x }
                ^
src\scalation\linalgebra\Matric.scala:75: error: not found: value Complex
    def set (x: Double) { for (i <- range1; j <- range2) this(i, j) = Complex (x) }
                                                                      ^
src\scalation\linalgebra\Matric.scala:81: error: not found: type Complex
    def setLower (x: Complex) { for (i <- range1; j <- 0 until i) this(i, j) = x }
                     ^
src\scalation\linalgebra\Matric.scala:87: error: not found: type Complex
    def set (u: Array [Array [Complex]]) { for (i <- range1; j <- range2) this(i, j) = u(i)(j) }
                              ^
src\scalation\linalgebra\Matric.scala:93: error: not found: type Complex
    def foreach [U] (f: Array [Complex] => U)
                               ^
src\scalation\linalgebra\VectorC.scala:13: error: object math is not a member of package scalation
import scalation.math.Complex
                 ^
src\scalation\linalgebra\VectorC.scala:153: error: not found: type Complex
    def apply (): Array [Complex] = v
                         ^
src\scalation\linalgebra\VectorC.scala:142: error: not found: type Complex
    def apply (i: Int): Complex = v(i)
                        ^
src\scalation\linalgebra\Matric.scala:179: error: not found: type Complex
    def + (s: Complex): Matric
              ^
src\scalation\linalgebra\Matric.scala:185: error: not found: type Complex
    def += (s: Complex)
               ^
src\scalation\linalgebra\Matric.scala:191: error: not found: type Complex
    def - (s: Complex): Matric
              ^
src\scalation\linalgebra\Matric.scala:197: error: not found: type Complex
    def -= (s: Complex)
               ^
src\scalation\linalgebra\Matric.scala:209: error: not found: type Complex
    def * (s: Complex): Matric
              ^
src\scalation\linalgebra\Matric.scala:215: error: not found: type Complex
    def *= (s: Complex)
               ^
src\scalation\linalgebra\Matric.scala:294: error: not found: type Complex
    def setDiag (s: Complex) { for (i <- range1) this(i, i) = s }
                    ^
src\scalation\linalgebra\Matric.scala:341: error: not found: type Complex
    def trace: Complex
               ^
src\scalation\linalgebra\Matric.scala:346: error: not found: type Complex
    def sum: Complex
             ^
src\scalation\linalgebra\Matric.scala:351: error: not found: type Complex
    def sumLower: Complex
                  ^
src\scalation\linalgebra\Matric.scala:356: error: not found: type Complex
    def det: Complex
             ^
src\scalation\linalgebra\MatrixC.scala:13: error: object math is not a member of package scalation
import scalation.math.Complex
                 ^
src\scalation\linalgebra\MatrixC.scala:14: error: object util is not a member of package scalation
import scalation.util.Error
                 ^
src\scalation\linalgebra\MatrixC.scala:26: error: class Error is inherited twice
      extends Matric with Error with Serializable
              ^
src\scalation\linalgebra\MatrixC.scala:26: error: class Error is inherited twice
      extends Matric with Error with Serializable
                          ^
src\scalation\linalgebra\MatrixC.scala:25: error: not found: type Complex
       private var v:  Array [Array [Complex]] = null)
                                     ^
src\scalation\linalgebra\MatrixC.scala:32: error: not found: type Complex
        v = Array.ofDim [Complex] (dim1, dim2)
                         ^
src\scalation\linalgebra\MatrixC.scala:34: error: not found: value flaw
        flaw ("constructor", "dimensions are wrong")
        ^
src\scalation\linalgebra\MatrixC.scala:80: error: not found: type Complex
    def this (dim: Tuple2 [Int, Int], u: Complex*)
                                         ^
src\scalation\linalgebra\MatrixC.scala:73: error: not found: type Complex
    def this (u: Array [Array [Complex]]) { this (u.length, u(0).length, u) }
                               ^
src\scalation\linalgebra\MatrixC.scala:63: error: not found: type Complex
    def this (dim1: Int, x: Complex, y: Complex)
                            ^
src\scalation\linalgebra\MatrixC.scala:63: error: not found: type Complex
    def this (dim1: Int, x: Complex, y: Complex)
                                        ^
src\scalation\linalgebra\MatrixC.scala:49: error: not found: type Complex
    def this (dim1: Int, dim2: Int, x: Complex)
                                       ^
src\scalation\linalgebra\MatrixC.scala:95: error: not found: value Complex
        for (i <- range1; j <- range2) v(i)(j) = if (j == 0 && j == 0) Complex (u00)
                                                                       ^
src\scalation\linalgebra\MatrixC.scala:124: error: not found: type Complex
    def apply (i: Int, j: Int): Complex = v(i)(j)
                                ^
src\scalation\linalgebra\VectorC.scala:51: error: not found: type Complex
    def this (u0: Complex, u1: Complex, u: Complex*)
                  ^
src\scalation\linalgebra\VectorC.scala:51: error: not found: type Complex
    def this (u0: Complex, u1: Complex, u: Complex*)
                               ^
src\scalation\linalgebra\VectorC.scala:51: error: not found: type Complex
    def this (u0: Complex, u1: Complex, u: Complex*)
                                           ^
src\scalation\linalgebra\VectorC.scala:43: error: not found: type Complex
    def this (u: Array [Complex]) { this (u.length, u) }
                        ^
src\scalation\linalgebra\VectorC.scala:26: error: not found: type Complex
     protected var v:   Array [Complex] = null)
                               ^
src\scalation\linalgebra\MatrixC.scala:138: error: not found: type Complex
    def update (i: Int, j: Int, x: Complex) { v(i)(j) = x }
                                   ^
src\scalation\linalgebra\MatrixC.scala:248: error: not found: value flaw
        if (b.dim != dim2) flaw ("++", "vector does not match row dimension")
                           ^
src\scalation\linalgebra\MatrixC.scala:288: error: not found: type Complex
    def + (s: Complex): MatrixC =
              ^
src\scalation\linalgebra\MatrixC.scala:299: error: not found: type Complex
    def += (s: Complex)
               ^
src\scalation\linalgebra\MatrixC.scala:328: error: not found: type Complex
    def - (s: Complex): MatrixC =
              ^
src\scalation\linalgebra\MatrixC.scala:339: error: not found: type Complex
    def -= (s: Complex)
               ^
src\scalation\linalgebra\MatrixC.scala:382: error: not found: value Complex
                var sum = Complex._0
                          ^
src\scalation\linalgebra\MatrixC.scala:409: error: not found: value Complex
            var sum = Complex._0
                      ^
src\scalation\linalgebra\MatrixC.scala:420: error: not found: type Complex
    def * (s: Complex): MatrixC =
              ^
src\scalation\linalgebra\MatrixC.scala:431: error: not found: type Complex
    def *= (s: Complex)
               ^
src\scalation\linalgebra\MatrixC.scala:460: error: not found: type Complex
    def / (s: Complex): MatrixC =
              ^
src\scalation\linalgebra\MatrixC.scala:471: error: not found: type Complex
    def /= (s: Complex)
               ^
src\scalation\linalgebra\MatrixC.scala:483: error: not found: value flaw
        if (p < 2)      flaw ("~^", "p must be an integer >= 2")
                        ^
src\scalation\linalgebra\MatrixC.scala:484: error: not found: value flaw
        if (! isSquare) flaw ("~^", "only defined on square matrices")
                        ^
src\scalation\linalgebra\MatrixC.scala:487: error: not found: value Complex
            var sum = Complex._0
                      ^
src\scalation\linalgebra\MatrixC.scala:498: error: not found: type Complex
    def max (e: Int = dim1): Complex =
                             ^
src\scalation\linalgebra\MatrixC.scala:511: error: not found: type Complex
    def min (e: Int = dim1): Complex =
                             ^
src\scalation\linalgebra\MatrixC.scala:532: error: not found: value flaw
            if (pivot == Complex._0) flaw ("lud_npp", "use lud since you have a zero pivot")
                                     ^
src\scalation\linalgebra\MatrixC.scala:611: error: not found: value Complex
        for (k <- i + 1 until a.dim1 if Complex.abs (a(k, i)) > max) {
                                        ^
src\scalation\linalgebra\MatrixC.scala:615: error: not found: value flaw
        if (kMax == i) flaw ("partialPivoting", "unable to find a non-zero pivot")
                       ^
src\scalation\linalgebra\MatrixC.scala:699: error: not found: value flaw
        if (! isSymmetric) flaw ("diag", "this matrix must be symmetric")
                           ^
src\scalation\linalgebra\MatrixC.scala:726: error: not found: value Complex
        val c = new MatrixC (dim1, Complex._1, Complex._0)   // let c represent the augmentation
                                   ^
src\scalation\linalgebra\MatrixC.scala:726: error: not found: value Complex
        val c = new MatrixC (dim1, Complex._1, Complex._0)   // let c represent the augmentation
                                               ^
src\scalation\linalgebra\MatrixC.scala:730: error: not found: value flaw
            if (pivot == Complex._0) flaw ("inverse_npp", "use inverse since you have a zero pivot")
                                     ^
src\scalation\linalgebra\MatrixC.scala:752: error: not found: value Complex
        val c = new MatrixC (dim1, Complex._1, Complex._0)   // let c represent the augmentation
                                   ^
src\scalation\linalgebra\MatrixC.scala:752: error: not found: value Complex
        val c = new MatrixC (dim1, Complex._1, Complex._0)   // let c represent the augmentation
                                               ^
src\scalation\linalgebra\MatrixC.scala:783: error: not found: value Complex
        val c = new MatrixC (dim1, Complex._1, Complex._0)   // let c represent the augmentation
                                   ^
src\scalation\linalgebra\MatrixC.scala:783: error: not found: value Complex
        val c = new MatrixC (dim1, Complex._1, Complex._0)   // let c represent the augmentation
                                               ^
src\scalation\linalgebra\MatrixC.scala:814: error: not found: value flaw
        if (dim2 < dim1) flaw ("reduce", "requires n (columns) >= m (rows)")
                         ^
src\scalation\linalgebra\MatrixC.scala:841: error: not found: value flaw
        if (dim2 < dim1) flaw ("reduce", "requires n (columns) >= m (rows)")
                         ^
java.lang.AssertionError: assertion failed: List(method *, method *, method *, method *)
	at scala.reflect.internal.Symbols$Symbol.suchThat(Symbols.scala:1669)
	at scala.reflect.internal.Types$$anonfun$66.apply(Types.scala:6831)
	at scala.reflect.internal.Types$$anonfun$66.apply(Types.scala:6830)
	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)
	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)
	at scala.collection.AbstractTraversable.map(Traversable.scala:105)
	at scala.reflect.internal.Types$class.lubsym$1(Types.scala:6830)
	at scala.reflect.internal.Types$$anonfun$69.apply(Types.scala:6860)
	at scala.reflect.internal.Types$$anonfun$69.apply(Types.scala:6858)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.reflect.internal.Scopes$Scope.foreach(Scopes.scala:315)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at scala.reflect.internal.Types$class.lub1$1(Types.scala:6858)
	at scala.reflect.internal.Types$class.lub0$1(Types.scala:6804)
	at scala.reflect.internal.Types$class.scala$reflect$internal$Types$$lub(Types.scala:6899)
	at scala.reflect.internal.Types$class.lub(Types.scala:6773)
	at scala.reflect.internal.SymbolTable.lub(SymbolTable.scala:13)
	at scala.reflect.internal.Types$class.weakLub(Types.scala:6707)
	at scala.reflect.internal.SymbolTable.weakLub(SymbolTable.scala:13)
	at scala.tools.nsc.typechecker.Typers$Typer.ptOrLub(Typers.scala:2501)
	at scala.tools.nsc.typechecker.Typers$Typer.typedIf$1(Typers.scala:4349)
	at scala.tools.nsc.typechecker.Typers$Typer.typed1(Typers.scala:5559)
	at scala.tools.nsc.typechecker.Typers$Typer.typed(Typers.scala:5630)
	at scala.tools.nsc.typechecker.Typers$Typer.typed(Typers.scala:5704)
	at scala.tools.nsc.typechecker.Typers$Typer.computeType(Typers.scala:5788)
	at scala.tools.nsc.typechecker.Namers$Namer.assignTypeToTree(Namers.scala:828)
	at scala.tools.nsc.typechecker.Namers$Namer.valDefSig(Namers.scala:1309)
	at scala.tools.nsc.typechecker.Namers$Namer.getSig$1(Namers.scala:1450)
	at scala.tools.nsc.typechecker.Namers$Namer.typeSig(Namers.scala:1459)
	at scala.tools.nsc.typechecker.Namers$Namer$$anonfun$monoTypeCompleter$1$$anonfun$apply$1.apply$mcV$sp(Namers.scala:725)
	at scala.tools.nsc.typechecker.Namers$Namer$$anonfun$monoTypeCompleter$1$$anonfun$apply$1.apply(Namers.scala:724)
	at scala.tools.nsc.typechecker.Namers$Namer$$anonfun$monoTypeCompleter$1$$anonfun$apply$1.apply(Namers.scala:724)
	at scala.tools.nsc.typechecker.Namers$Namer.scala$tools$nsc$typechecker$Namers$Namer$$logAndValidate(Namers.scala:1492)
	at scala.tools.nsc.typechecker.Namers$Namer$$anonfun$monoTypeCompleter$1.apply(Namers.scala:724)
	at scala.tools.nsc.typechecker.Namers$Namer$$anonfun$monoTypeCompleter$1.apply(Namers.scala:723)
	at scala.tools.nsc.typechecker.Namers$$anon$1.completeImpl(Namers.scala:1607)
	at scala.tools.nsc.typechecker.Namers$LockingTypeCompleter$class.complete(Namers.scala:1615)
	at scala.tools.nsc.typechecker.Namers$$anon$1.complete(Namers.scala:1605)
	at scala.reflect.internal.Symbols$Symbol.info(Symbols.scala:1229)
	at scala.reflect.internal.Symbols$Symbol.initialize(Symbols.scala:1365)
	at scala.tools.nsc.typechecker.Typers$Typer.typed1(Typers.scala:5282)
	at scala.tools.nsc.typechecker.Typers$Typer.typed(Typers.scala:5630)
	at scala.tools.nsc.typechecker.Typers$Typer.scala$tools$nsc$typechecker$Typers$Typer$$typedStat$1(Typers.scala:2921)
	at scala.tools.nsc.typechecker.Typers$Typer$$anonfun$62.apply(Typers.scala:3025)
	at scala.tools.nsc.typechecker.Typers$Typer$$anonfun$62.apply(Typers.scala:3025)
	at scala.collection.immutable.List.loop$1(List.scala:170)
	at scala.collection.immutable.List.mapConserve(List.scala:186)
	at scala.tools.nsc.typechecker.Typers$Typer.typedStats(Typers.scala:3025)
	at scala.tools.nsc.typechecker.Typers$Typer.typedBlock(Typers.scala:2425)
	at scala.tools.nsc.typechecker.Typers$Typer.typed1(Typers.scala:5558)
	at scala.tools.nsc.typechecker.Typers$Typer.typed(Typers.scala:5630)
	at scala.tools.nsc.typechecker.Typers$Typer.transformedOrTyped(Typers.scala:5825)
	at scala.tools.nsc.typechecker.Typers$Typer.typedDefDef(Typers.scala:2250)
	at scala.tools.nsc.typechecker.Typers$Typer.typed1(Typers.scala:5557)
	at scala.tools.nsc.typechecker.Typers$Typer.typed(Typers.scala:5630)
	at scala.tools.nsc.typechecker.Typers$Typer.scala$tools$nsc$typechecker$Typers$Typer$$typedStat$1(Typers.scala:2921)
	at scala.tools.nsc.typechecker.Typers$Typer$$anonfun$62.apply(Typers.scala:3025)
	at scala.tools.nsc.typechecker.Typers$Typer$$anonfun$62.apply(Typers.scala:3025)
	at scala.collection.immutable.List.loop$1(List.scala:170)
	at scala.collection.immutable.List.mapConserve(List.scala:186)
	at scala.tools.nsc.typechecker.Typers$Typer.typedStats(Typers.scala:3025)
	at scala.tools.nsc.typechecker.Typers$Typer.typedTemplate(Typers.scala:1914)
	at scala.tools.nsc.typechecker.Typers$Typer.typedClassDef(Typers.scala:1751)
	at scala.tools.nsc.typechecker.Typers$Typer.typed1(Typers.scala:5571)
	at scala.tools.nsc.typechecker.Typers$Typer.typed(Typers.scala:5630)
	at scala.tools.nsc.typechecker.Typers$Typer.scala$tools$nsc$typechecker$Typers$Typer$$typedStat$1(Typers.scala:2921)
	at scala.tools.nsc.typechecker.Typers$Typer$$anonfun$62.apply(Typers.scala:3025)
	at scala.tools.nsc.typechecker.Typers$Typer$$anonfun$62.apply(Typers.scala:3025)
	at scala.collection.immutable.List.loop$1(List.scala:170)
	at scala.collection.immutable.List.mapConserve(List.scala:186)
	at scala.tools.nsc.typechecker.Typers$Typer.typedStats(Typers.scala:3025)
	at scala.tools.nsc.typechecker.Typers$Typer.typedPackageDef$1(Typers.scala:5288)
	at scala.tools.nsc.typechecker.Typers$Typer.typed1(Typers.scala:5575)
	at scala.tools.nsc.typechecker.Typers$Typer.typed(Typers.scala:5630)
	at scala.tools.nsc.typechecker.Typers$Typer.typed(Typers.scala:5687)
	at scala.tools.nsc.typechecker.Analyzer$typerFactory$$anon$3.apply(Analyzer.scala:99)
	at scala.tools.nsc.Global$GlobalPhase.applyPhase(Global.scala:463)
	at scala.tools.nsc.typechecker.Analyzer$typerFactory$$anon$3$$anonfun$run$1.apply(Analyzer.scala:91)
	at scala.tools.nsc.typechecker.Analyzer$typerFactory$$anon$3$$anonfun$run$1.apply(Analyzer.scala:91)
	at scala.collection.Iterator$class.foreach(Iterator.scala:727)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)
	at scala.tools.nsc.typechecker.Analyzer$typerFactory$$anon$3.run(Analyzer.scala:91)
	at scala.tools.nsc.Global$Run.compileUnitsInternal(Global.scala:1582)
	at scala.tools.nsc.Global$Run.compileUnits(Global.scala:1556)
	at scala.tools.nsc.Global$Run.compileSources(Global.scala:1552)
	at scala.tools.nsc.Global$Run.compile(Global.scala:1661)
	at Comp.compPackage(Comp.scala:54)
	at Build$$anonfun$compile$1.apply(Build.scala:75)
	at Build$$anonfun$compile$1.apply(Build.scala:74)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:105)
	at Build$.compile(Build.scala:74)
	at Build$delayedInit$body.apply(Build.scala:116)
	at scala.Function0$class.apply$mcV$sp(Function0.scala:40)
	at scala.runtime.AbstractFunction0.apply$mcV$sp(AbstractFunction0.scala:12)
	at scala.App$$anonfun$main$1.apply(App.scala:71)
	at scala.App$$anonfun$main$1.apply(App.scala:71)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at scala.collection.generic.TraversableForwarder$class.foreach(TraversableForwarder.scala:32)
	at scala.App$class.main(App.scala:71)
	at Build$.main(Build.scala:21)
	at Build.main(Build.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at scala.tools.nsc.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:71)
	at scala.tools.nsc.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)
	at scala.tools.nsc.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:139)
	at scala.tools.nsc.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:71)
	at scala.tools.nsc.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:139)
	at scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:28)
	at scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:45)
	at scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:35)
	at scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:45)
	at scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:74)
	at scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:96)
	at scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:105)
	at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)
